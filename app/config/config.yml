# This is the core config that gets read in any mode: production, dev, or test

# Imports the system parameter and security settings files
imports:
    - { resource: parameters.yml }
    - { resource: security.yml }

# General settings for the Symfony framework
framework:
    translator:      { fallback: %locale% }
    secret:          %secret%
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: %kernel.debug%
    form:            ~
    csrf_protection: false # Apparently should be disabled if building REST-like API
    validation:      { enable_annotations: true }
    templating:
        engines: ['twig'] # Needed for non API routes and Symphony profiler and debug tools
    default_locale:  "%locale%"
    trusted_proxies: ~
    session:         false
    fragments:       ~

# Doctrine Configuration - see parameters.yml
doctrine:
    dbal:
        driver:   %database_driver%
        host:     %database_host%
        port:     %database_port%
        dbname:   %database_name%
        user:     %database_user%
        password: %database_password%
        charset:  UTF8
        # if using pdo_sqlite as your database driver, add the path in parameters.yml
        # e.g. database_path: %kernel.root_dir%/data/data.db3
        # path:     %database_path%
    orm:
        auto_generate_proxy_classes: %kernel.debug%
        auto_mapping: true

# Swiftmailer Configuration - see parameters.yml
# yet to be set up - will be needed later in iPeer development
swiftmailer:
    transport: %mailer_transport%
    host:      %mailer_host%
    username:  %mailer_user%
    password:  %mailer_password%
    spool:     { type: memory }

# Enabled request converters and routing annotation definitions for (iPeer) controllers
# View is not needed in /api/
sensio_framework_extra:
    view: { annotations: false }
    request: { converters: true }
    router:  { annotations: true }

# FOS Rest bundle
# most of the settings here are required, but this section should be audited
fos_rest:
    param_fetcher_listener: true
    view:
        mime_types:
            #incoming /api/ requests need to have one of these values for the HTTP header "Content-Type"
            json: ['application/json', 'application/json;version=1.0', 'application/json;version=1.1']
        view_response_listener: 'force'
        formats:
            json: true
    format_listener:
        rules:
            - { path: ^/api, priorities: [ json ], fallback_format: ~, prefer_extension: false }
        media_type:
            version_regex: '/(v|version)=(?P<version>[0-9\.]+)/'
    exception:
        codes: # Specify an exception and what HTTP code it should turn into
            'Symfony\Component\Routing\Exception\ResourceNotFoundException': 404
            'Doctrine\ORM\OptimisticLockException': HTTP_CONFLICT
            'Symfony\Component\HttpKernel\Exception\NotFoundHttpException': 404
        messages:
            'Symfony\Component\Routing\Exception\ResourceNotFoundException': true
    allowed_methods_listener: true
    access_denied_listener:
        json: true
    body_listener: true
    body_converter:        # The body_ lines allow for automatic conversion of the request body via
            enabled: true  #   @ParamConverter("variableName", converter="fos_rest.request_body")
            validate: true # Converted item gets run through Symfony validator
            validation_errors_argument:  validationErrors # the ValidationErrorListener depends on the name of this
    routing_loader:
        default_format: json
        include_format: true
    serializer:
        serialize_null: true

# Allows for cross domain requests
# Needed for development because front-end & back-end are run on different locahost ports
# In production, may need to be modified and might be combined with authentication
nelmio_cors:
    defaults:
        allow_credentials: false
        allow_origin: []
        allow_headers: []
        allow_methods: []
        expose_headers: []
        max_age: 0
        hosts: []
        origin_regex: false
    paths:
        '^/api/':
            allow_origin: ['*']
            allow_headers: ['X-Custom-Auth', 'content-type']
            allow_methods: ['POST', 'PUT', 'GET', 'DELETE']
            max_age: 3600
        '^/':
            origin_regex: true
            allow_origin: ['^http://localhost:[0-9]+']
            allow_headers: ['X-Custom-Auth']
            allow_methods: ['POST', 'PUT', 'GET', 'DELETE']
            max_age: 3600
            hosts: ['^api\.']

# Any services that should run throughout the flow of execution
services:
    # Custom service to return a HTTP 400 if the validator failed on a POST/update/create request for an entity
    # Used in conjunction with "body_converter" configuration above
    request_body.validation_exception_handler:
        class: Ipeer\ApiUtilityBundle\EventListener\ValidationErrorListener
        tags: # the priority needs to be less than the default of zero to receive the validation errors
            - { name: kernel.event_listener, event: kernel.controller, priority: -100, method: onKernelController }

nelmio_api_doc:
    name: 'iPeer4 API Documentation'
    sandbox:
        body_format:
            formats:
                - json
            default_format: json
        request_format:
            formats:
                json: application/json
                